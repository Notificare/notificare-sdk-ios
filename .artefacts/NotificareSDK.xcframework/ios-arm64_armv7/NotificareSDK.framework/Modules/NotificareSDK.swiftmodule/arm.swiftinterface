// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NotificareSDK
import CoreData
import Foundation
import Swift
import UIKit
import os
public protocol NotificareLocationManager {
  init(applicationKey: Swift.String, applicationSecret: Swift.String)
}
@_hasMissingDesignatedInitializers public class Notificare {
  public static let shared: NotificareSDK.Notificare
  public var logger: NotificareSDK.NotificareLogger {
    get
  }
  public var eventLogger: NotificareSDK.NotificareEventLogger {
    get
  }
  public var pushManager: NotificareSDK.NotificarePushManager? {
    get
  }
  public var locationManager: NotificareSDK.NotificareLocationManager? {
    get
  }
  public var delegate: NotificareSDK.NotificareDelegate?
  public func configure(applicationKey: Swift.String, applicationSecret: Swift.String, withEnvironment environment: NotificareSDK.NotificareEnvironment = .production)
  public func launch()
  public func unLaunch()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NotificareLogger {
  public var level: NotificareSDK.NotificareLogger.Level
  public func verbose(_ message: Swift.String, file: Swift.String = #file)
  public func verbose(_ message: Swift.String, tag: Swift.String?)
  public func debug(_ message: Swift.String, file: Swift.String = #file)
  public func debug(_ message: Swift.String, tag: Swift.String?)
  public func info(_ message: Swift.String, file: Swift.String = #file)
  public func info(_ message: Swift.String, tag: Swift.String?)
  public func warning(_ message: Swift.String, file: Swift.String = #file)
  public func warning(_ message: Swift.String, tag: Swift.String?)
  public func error(_ message: Swift.String, file: Swift.String = #file)
  public func error(_ message: Swift.String, tag: Swift.String?)
  public enum Level : Swift.String {
    case verbose
    case debug
    case info
    case warning
    case error
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
extension NotificareLogger.Level : Swift.Comparable {
  public static func < (lhs: NotificareSDK.NotificareLogger.Level, rhs: NotificareSDK.NotificareLogger.Level) -> Swift.Bool
}
public protocol NotificarePushManager {
  init(applicationKey: Swift.String, applicationSecret: Swift.String)
  func configure()
}
public enum NotificareEnvironment : Swift.String {
  case test
  case production
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol NotificareDelegate {
  func notificare(_ notificare: NotificareSDK.Notificare, onReady application: NotificareSDK.NotificareApplicationInfo)
  func notificare(_ notificare: NotificareSDK.Notificare, didRegisterDevice device: NotificareSDK.NotificareDevice)
}
@_hasMissingDesignatedInitializers public class NotificareEventLogger {
  public func logCustom(_ event: Swift.String, data: NotificareSDK.NotificareEventData? = nil)
  @objc deinit
}
extension NotificareEventLogger : NotificareSDK.NotificareAppDelegateInterceptor {
  @objc dynamic public func applicationDidBecomeActive(_ application: UIKit.UIApplication)
}
public enum NotificareError : Swift.Error {
  case notConfigured
  case networkFailure(cause: NotificareSDK.NotificareNetworkError)
  case encodingFailure
  case parsingFailure
  case noDevice
}
public struct NotificareApplicationInfo : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let category: Swift.String
  public let appStoreId: Swift.String?
  public let androidPackageName: Swift.String?
  public let services: [Swift.String : Swift.Bool]
  public let inboxConfig: NotificareSDK.NotificareApplicationInfo.InboxConfig?
  public let passbookConfig: NotificareSDK.NotificareApplicationInfo.PassbookConfig?
  public let regionConfig: NotificareSDK.NotificareApplicationInfo.RegionConfig?
  public let websitePushConfig: NotificareSDK.NotificareApplicationInfo.WebsitePushConfig?
  public let userDataFields: [NotificareSDK.NotificareApplicationInfo.UserDataField]
  public let actionCategories: [NotificareSDK.NotificareApplicationInfo.ActionCategory]
  public struct InboxConfig : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct PassbookConfig : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct RegionConfig : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct WebsitePushConfig : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserDataField : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct ActionCategory : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum NotificareNotificationType : Swift.String, Swift.Codable {
  case alert
  case image
  case map
  case none
  case passbook
  case rate
  case store
  case url
  case urlScheme
  case video
  case webview
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificareUserDataFieldType : Swift.String, Swift.Codable {
  case text
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationAction : Swift.String, Swift.Codable {
  case app
  case browser
  case callback
  case custom
  case mail
  case sms
  case telephone
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificareNetworkError : Swift.Error {
  case inaccessible
  case urlError(Foundation.URLError)
  case genericError(Swift.Error)
  case noResponse
  case invalidResponseType(Foundation.URLResponse)
  case noResponseData(Foundation.HTTPURLResponse)
  case endpointError(Foundation.HTTPURLResponse, Foundation.Data?)
}
extension NotificareNetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NotificareAutoLauncher : ObjectiveC.NSObject {
  @objc public static func setup()
  @objc public static func didFinishLaunching(_ notification: Foundation.Notification)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class NotificareSwizzler : Foundation.NSProxy {
  public static func setup(withRemoteNotifications: Swift.Bool = false)
  public static func addInterceptor(_ interceptor: NotificareSDK.NotificareAppDelegateInterceptor) -> Swift.String?
  public static func removeInterceptor(_ interceptor: NotificareSDK.NotificareAppDelegateInterceptor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NotificareDeviceManager {
  public static let shared: NotificareSDK.NotificareDeviceManager
  @objc deinit
}
public struct NotificareDevice {
  public let deviceTokenData: Foundation.Data
  public let deviceID: Swift.String
  public var userID: Swift.String?
  public var userName: Swift.String?
  public var timezone: Swift.Float
  public var osVersion: Swift.String
  public var sdkVersion: Swift.String
  public var appVersion: Swift.String
  public var deviceModel: Swift.String
  public var country: Swift.String?
  public var countryCode: Swift.String?
  public var language: Swift.String
  public var region: Swift.String
  public var transport: NotificareSDK.NotificareTransport
  public var dnd: NotificareSDK.NotificareDeviceDnD?
  public var userData: [Swift.String : Any]?
  public var latitude: Swift.Float?
  public var longitude: Swift.Float?
  public var altitude: Swift.Float?
  public var accuracy: Swift.Float?
  public var floor: Swift.Float?
  public var speed: Swift.Float?
  public var course: Swift.Float?
  public var lastRegistered: Foundation.Date
  public var locationServicesAuthStatus: Swift.String?
  public var locationServicesAccuracyAuth: Swift.String?
  public var registeredForNotifications: Swift.Bool
  public var allowedLocationServices: Swift.Bool
  public var allowedUI: Swift.Bool
  public var backgroundAppRefresh: Swift.Bool
  public var bluetoothON: Swift.Bool
}
extension NotificareDevice : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias NotificareEventData = [Swift.String : NotificareSDK.JSONValue]
public struct NotificareEvent {
  public let type: Swift.String
  public let timestamp: Swift.Int64
  public let deviceId: Swift.String
  public let sessionId: Swift.String?
  public let notificationId: Swift.String?
  public let userId: Swift.String?
  public let data: NotificareSDK.NotificareEventData?
}
extension NotificareEvent : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct NotificareDeviceDnD : Swift.Codable {
  public let start: Swift.String
  public let end: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum NotificareTransport : Swift.String, Swift.Codable {
  case notificare
  case apns
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NotificareAppDelegateInterceptor {
  @objc optional func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @objc optional func applicationWillResignActive(_ application: UIKit.UIApplication)
  @objc optional func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @objc optional func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  @objc optional func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any])
}
public enum JSONValue {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case object([Swift.String : NotificareSDK.JSONValue])
  case array([NotificareSDK.JSONValue])
}
extension JSONValue : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension JSONValue : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension JSONValue : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.Double)
  public typealias FloatLiteralType = Swift.Double
}
extension JSONValue : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension JSONValue : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: NotificareSDK.JSONValue...)
  public typealias ArrayLiteralElement = NotificareSDK.JSONValue
}
extension JSONValue : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, NotificareSDK.JSONValue)...)
  public typealias Key = Swift.String
  public typealias Value = NotificareSDK.JSONValue
}
extension JSONValue : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension JSONValue : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(NotificareCoreDataEvent) public class NotificareCoreDataEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NotificareCoreDataEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NotificareSDK.NotificareCoreDataEvent>
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deviceId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retries: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ttl: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
}
extension NotificareSDK.NotificareLogger.Level : Swift.Hashable {}
extension NotificareSDK.NotificareLogger.Level : Swift.RawRepresentable {}
extension NotificareSDK.NotificareEnvironment : Swift.Equatable {}
extension NotificareSDK.NotificareEnvironment : Swift.Hashable {}
extension NotificareSDK.NotificareEnvironment : Swift.RawRepresentable {}
extension NotificareSDK.NotificareNotificationType : Swift.Equatable {}
extension NotificareSDK.NotificareNotificationType : Swift.Hashable {}
extension NotificareSDK.NotificareNotificationType : Swift.RawRepresentable {}
extension NotificareSDK.NotificareUserDataFieldType : Swift.Equatable {}
extension NotificareSDK.NotificareUserDataFieldType : Swift.Hashable {}
extension NotificareSDK.NotificareUserDataFieldType : Swift.RawRepresentable {}
extension NotificareSDK.NotificationAction : Swift.Equatable {}
extension NotificareSDK.NotificationAction : Swift.Hashable {}
extension NotificareSDK.NotificationAction : Swift.RawRepresentable {}
extension NotificareSDK.NotificareTransport : Swift.Equatable {}
extension NotificareSDK.NotificareTransport : Swift.Hashable {}
extension NotificareSDK.NotificareTransport : Swift.RawRepresentable {}
