// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NotificareInboxKit
import CoreData
import Foundation
import NotificareKit
import Swift
import UIKit
public struct NotificareInboxItem {
  public let id: Swift.String
  public var notification: NotificareKit.NotificareNotification {
    get
  }
  public let time: Foundation.Date
  public var opened: Swift.Bool {
    get
  }
  public let expires: Foundation.Date?
}
public typealias NotificareInboxCallback<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class NotificareInbox : ObjectiveC.NSObject, NotificareKit.NotificareModule {
  public static let shared: NotificareInboxKit.NotificareInbox
  weak public var delegate: NotificareInboxKit.NotificareInboxDelegate?
  public var items: [NotificareInboxKit.NotificareInboxItem] {
    get
  }
  public var badge: Swift.Int {
    get
  }
  public static func configure(applicationKey _: Swift.String, applicationSecret _: Swift.String)
  public static func launch(_ completion: @escaping NotificareInboxKit.NotificareInboxCallback<Swift.Void>)
  public static func unlaunch(_ completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func refresh()
  public func refreshBadge(_ completion: @escaping NotificareInboxKit.NotificareInboxCallback<Swift.Int>)
  public func open(_ item: NotificareInboxKit.NotificareInboxItem, _ completion: @escaping NotificareInboxKit.NotificareInboxCallback<NotificareKit.NotificareNotification>)
  public func markAsRead(_ item: NotificareInboxKit.NotificareInboxItem, _ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  public func markAllAsRead(_ completion: @escaping NotificareInboxKit.NotificareInboxCallback<Swift.Void>)
  public func remove(_ item: NotificareInboxKit.NotificareInboxItem, _ completion: @escaping NotificareInboxKit.NotificareInboxCallback<Swift.Void>)
  public func clear(_ completion: @escaping NotificareInboxKit.NotificareInboxCallback<Swift.Void>)
  @objc deinit
  @objc override dynamic public init()
}
public protocol NotificareInboxDelegate : AnyObject {
  func notificare(_ notificareInbox: NotificareInboxKit.NotificareInbox, didUpdateInbox items: [NotificareInboxKit.NotificareInboxItem])
  func notificare(_ notificareInbox: NotificareInboxKit.NotificareInbox, didUpdateBadge badge: Swift.Int)
}
extension NotificareInboxDelegate {
  public func notificare(_: NotificareInboxKit.NotificareInbox, didUpdateInbox _: [NotificareInboxKit.NotificareInboxItem])
  public func notificare(_: NotificareInboxKit.NotificareInbox, didUpdateBadge _: Swift.Int)
}
public enum NotificareInboxError : Swift.Error {
  case inboxUnavailable
  case autoBadgeUnavailable
  public static func == (a: NotificareInboxKit.NotificareInboxError, b: NotificareInboxKit.NotificareInboxError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @objc(InboxItemEntity) public class InboxItemEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension InboxItemEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NotificareInboxKit.InboxItemEntity>
  @objc @NSManaged dynamic public var expires: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notification: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var opened: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var time: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var visible: Swift.Bool {
    @objc get
    @objc set
  }
}
extension NotificareInboxKit.NotificareInboxError : Swift.Equatable {}
extension NotificareInboxKit.NotificareInboxError : Swift.Hashable {}
