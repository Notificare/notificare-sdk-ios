// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NotificarePushUIKit
import AVFoundation
import CoreGraphics
import CoreMedia
import MapKit
import MessageUI
import MobileCoreServices
import NotificareCore
import NotificareKit
@_exported import NotificarePushUIKit
import SafariServices
import StoreKit
import Swift
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareAppActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareAppActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case unsupportedUrlScheme
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareAppActionHandler.ActionError, b: NotificarePushUIKit.NotificareAppActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareCustomActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareCustomActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareCustomActionHandler.ActionError, b: NotificarePushUIKit.NotificareCustomActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_inheritsConvenienceInitializers public class NotificareBaseNotificationViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class NotificareImageGalleryViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NotificareImageGalleryViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func numberOfSections(in _: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt _: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func collectionView(_: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers public class NotificareMapViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NotificareMapViewController : MapKit.MKMapViewDelegate {
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, viewFor annotation: MapKit.MKAnnotation) -> MapKit.MKAnnotationView?
  @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, annotationView view: MapKit.MKAnnotationView, calloutAccessoryControlTapped _: UIKit.UIControl)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareTelephoneActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareTelephoneActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError, b: NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@_hasMissingDesignatedInitializers public class NotificarePushUI {
  public static let shared: NotificarePushUIKit.NotificarePushUI
  weak public var delegate: NotificarePushUIKit.NotificarePushUIDelegate?
  public func presentNotification(_ notification: NotificareKit.NotificareNotification, in controller: UIKit.UIViewController)
  public func presentAction(_ action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification, with response: NotificareKit.NotificareNotification.ResponseData?, in controller: UIKit.UIViewController)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NotificareBaseActionHandler : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NotificareVideoViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificareVideoViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @objc dynamic public func webView(_: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: Swift.Error)
}
public protocol NotificarePushUIDelegate : AnyObject {
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, willPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didFinishPresentingNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didFailToPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didClickURL url: Foundation.URL, in notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, willExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didNotExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, didFailToExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification, error: Swift.Error?)
  func notificare(_ notificarePushUI: NotificarePushUIKit.NotificarePushUI, shouldPerformSelectorWithURL url: Foundation.URL, in action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
}
extension NotificarePushUIDelegate {
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, willPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didFinishPresentingNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didFailToPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didClickURL _: Foundation.URL, in _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, willExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didNotExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, didFailToExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification, error _: Swift.Error?)
  public func notificare(_: NotificarePushUIKit.NotificarePushUI, shouldPerformSelectorWithURL _: Foundation.URL, in _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
}
@objc @_inheritsConvenienceInitializers public class NotificareUrlViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificareUrlViewController : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension NotificareUrlViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: Swift.Error)
  @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class NotificareWebViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificareWebViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers public class NotificareWebViewActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareWebViewActionHandler : SafariServices.SFSafariViewControllerDelegate {
  @objc dynamic public func safariViewController(_: SafariServices.SFSafariViewController, didCompleteInitialLoad successfully: Swift.Bool)
}
extension NotificareWebViewActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareWebViewActionHandler.ActionError, b: NotificarePushUIKit.NotificareWebViewActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_hasMissingDesignatedInitializers public class NotificareCallbackActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareCallbackActionHandler : UIKit.UIImagePickerControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_: UIKit.UIImagePickerController)
}
extension NotificareCallbackActionHandler : UIKit.UINavigationControllerDelegate {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareBrowserActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareBrowserActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareBrowserActionHandler.ActionError, b: NotificarePushUIKit.NotificareBrowserActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_hasMissingDesignatedInitializers public class NotificareSmsActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareSmsActionHandler : MessageUI.MFMessageComposeViewControllerDelegate {
  @objc dynamic public func messageComposeViewController(_: MessageUI.MFMessageComposeViewController, didFinishWith result: MessageUI.MessageComposeResult)
}
extension NotificareSmsActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    case failed
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareSmsActionHandler.ActionError, b: NotificarePushUIKit.NotificareSmsActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_hasMissingDesignatedInitializers public class NotificareMailActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificareMailActionHandler : MessageUI.MFMailComposeViewControllerDelegate {
  @objc dynamic public func mailComposeController(_: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: Swift.Error?)
}
extension NotificareMailActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareMailActionHandler.ActionError, b: NotificarePushUIKit.NotificareMailActionHandler.ActionError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension NotificarePushUIKit.NotificareAppActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareAppActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareCustomActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareCustomActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareWebViewActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareWebViewActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareBrowserActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareBrowserActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareSmsActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareSmsActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareMailActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareMailActionHandler.ActionError : Swift.Hashable {}
