// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NotificarePushKit
import Foundation
import MobileCoreServices
import NotificareKit
@_exported import NotificarePushKit
import Swift
import UIKit
import UserNotifications
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificarePush : ObjectiveC.NSObject, NotificareKit.NotificareModule {
  public static let shared: NotificarePushKit.NotificarePush
  weak public var delegate: NotificarePushKit.NotificarePushDelegate?
  public var authorizationOptions: UserNotifications.UNAuthorizationOptions
  public var categoryOptions: UserNotifications.UNNotificationCategoryOptions
  public var presentationOptions: UserNotifications.UNNotificationPresentationOptions
  public var isRemoteNotificationsEnabled: Swift.Bool {
    get
  }
  public var allowedUI: Swift.Bool {
    get
  }
  public static func migrate()
  public static func configure()
  public static func launch(_ completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func unlaunch(_ completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func enableRemoteNotifications(_ completion: @escaping NotificareKit.NotificareCallback<Swift.Bool>)
  public func disableRemoteNotifications()
  public func isNotificareNotification(_ userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  public func fetchAttachment(for userInfo: [Swift.AnyHashable : Any], _ completion: @escaping NotificareKit.NotificareCallback<UserNotifications.UNNotificationAttachment>)
  @objc deinit
}
extension NotificarePush : NotificareKit.NotificareAppDelegateInterceptor {
}
extension NotificarePush : UserNotifications.UNUserNotificationCenterDelegate {
  @objc dynamic public func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, openSettingsFor notification: UserNotifications.UNNotification?)
}
public struct NotificareSystemNotification {
  public let id: Swift.String
  public let type: Swift.String
  public let extra: [Swift.String : Any]
  public func toJson() throws -> [Swift.String : Any]
  public static func fromJson(json: [Swift.String : Any]) throws -> NotificarePushKit.NotificareSystemNotification
}
extension NotificareSystemNotification : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol NotificarePushDelegate : AnyObject {
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didChangeNotificationSettings granted: Swift.Bool)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didReceiveUnknownNotification userInfo: [Swift.AnyHashable : Any])
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didReceiveNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didReceiveSystemNotification notification: NotificarePushKit.NotificareSystemNotification)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, shouldOpenSettings notification: NotificareKit.NotificareNotification?)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didReceiveUnknownAction action: Swift.String, for notification: [Swift.AnyHashable : Any], responseText: Swift.String?)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didOpenNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePush: NotificarePushKit.NotificarePush, didOpenAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
}
extension NotificarePushDelegate {
  public func notificare(_: NotificarePushKit.NotificarePush, didFailToRegisterForRemoteNotificationsWithError _: Swift.Error)
  public func notificare(_: NotificarePushKit.NotificarePush, didChangeNotificationSettings _: Swift.Bool)
  public func notificare(_: NotificarePushKit.NotificarePush, didReceiveUnknownNotification _: [Swift.AnyHashable : Any])
  public func notificare(_: NotificarePushKit.NotificarePush, didReceiveNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushKit.NotificarePush, didReceiveSystemNotification _: NotificarePushKit.NotificareSystemNotification)
  public func notificare(_: NotificarePushKit.NotificarePush, shouldOpenSettings _: NotificareKit.NotificareNotification?)
  public func notificare(_: NotificarePushKit.NotificarePush, didReceiveUnknownAction _: Swift.String, for _: [Swift.AnyHashable : Any], responseText _: Swift.String?)
  public func notificare(_: NotificarePushKit.NotificarePush, didOpenNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: NotificarePushKit.NotificarePush, didOpenAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
}
extension NotificarePush {
  @objc dynamic public func application(_: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken token: Foundation.Data)
  @objc dynamic public func application(_: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  @objc dynamic public func application(_: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
}
